import { Balance } from './interfaces/Balance';
import { Platform } from './interfaces/Platform';
import { Organization } from './interfaces/Organization';
import { Nexus } from './interfaces/Nexus';
import { Account } from './interfaces/Account';
import { Leaderboard } from './interfaces/Leaderboard';
import { Chain } from './interfaces/Chain';
import { Contract } from './interfaces/Contract';
import { Event } from './interfaces/Event';
import { TransactionData } from './interfaces/TransactionData';
import { AccountTransactions } from './interfaces/AccountTransactions';
import { Paginated } from './interfaces/Paginated';
import { Block } from './interfaces/Block';
import { Token } from './interfaces/Token';
import { TokenData } from './interfaces/TokenData';
import { Auction } from './interfaces/Auction';
import { Script } from './interfaces/Script';
import { Archive } from './interfaces/Archive';
import { ABIContract } from './interfaces/ABIContract';
import { Receipt } from './interfaces/Receipt';
import { Peer } from './interfaces/Peer';
import { Validator } from './interfaces/Validator';
import { Swap } from './interfaces/Swap';
import { NFT } from './interfaces/NFT';
export declare class PhantasmaAPI {
    host: string;
    rpcName: string;
    nexus: string;
    availableHosts: any[];
    pingAsync(host: string): Promise<number>;
    constructor(defHost: string, peersUrlJson: string, nexus: string);
    JSONRPC(method: string, params: Array<any>): Promise<any>;
    setRpcHost(rpcHost: string): void;
    setRpcByName(rpcName: string): void;
    setNexus(nexus: string): void;
    updateRpc(): void;
    convertDecimals(amount: number, decimals: number): number;
    getAccount(account: string, extended?: boolean): Promise<Account>;
    getAccounts(accounts: string[], extended?: boolean): Promise<Account[]>;
    lookUpName(name: string): Promise<string>;
    getAddressesBySymbol(symbol: string, extended?: boolean): Promise<Account[]>;
    getBlockHeight(chainInput: string): Promise<number>;
    getBlockTransactionCountByHash(blockHash: string): Promise<number>;
    getBlockByHash(blockHash: string): Promise<Block>;
    getRawBlockByHash(blockHash: string): Promise<string>;
    getBlockByHeight(chainInput: string, height: number): Promise<Block>;
    getLatestBlock(chainInput: string): Promise<Block>;
    getRawBlockByHeight(chainInput: string, height: number): Promise<string>;
    getRawLatestBlock(chainInput: string): Promise<string>;
    getTransactionByBlockHashAndIndex(blockHash: string, index: number): Promise<TransactionData>;
    getAddressTransactions(account: string, page: number, pageSize: number): Promise<Paginated<AccountTransactions>>;
    getAddressTransactionCount(account: string, chainInput: string): Promise<number>;
    sendRawTransaction(txData: string): Promise<string>;
    invokeRawScript(chainInput: string, scriptData: string): Promise<Script>;
    getTransaction(hashText: string): Promise<TransactionData>;
    cancelTransaction(hashText: string): Promise<string>;
    getChains(extended?: boolean): Promise<Chain[]>;
    getChain(name: string, extended?: boolean): Promise<Chain>;
    getNexus(extended?: boolean): Promise<Nexus>;
    getContracts(chainAddressOrName?: string, extended?: boolean): Promise<Contract[]>;
    getContract(chainAddressOrName: string, contractName: string): Promise<Contract>;
    getContractByAddress(chainAddressOrName: string, contractAddress: string): Promise<Contract>;
    getOrganization(ID: string, extended?: boolean): Promise<Organization>;
    getOrganizationByName(name: string, extended?: boolean): Promise<Organization>;
    getOrganizations(extended?: boolean): Promise<Organization[]>;
    getLeaderboard(name: string): Promise<Leaderboard>;
    getTokens(extended?: boolean): Promise<Token[]>;
    getToken(symbol: string, extended?: boolean): Promise<Token>;
    getTokenData(symbol: string, IDtext: string): Promise<TokenData>;
    getTokenBalance(account: string, tokenSymbol: string, chainInput: string): Promise<Balance>;
    getAuctionsCount(chainAddressOrName: string, symbol: string): Promise<number>;
    getAuctions(chainAddressOrName: string, symbol: string, page: number, pageSize: number): Promise<Auction>;
    getAuction(chainAddressOrName: string, symbol: string, IDtext: string): Promise<Auction>;
    getArchive(hashText: string): Promise<Archive>;
    writeArchive(hashText: string, blockIndex: number, blockContent: string): Promise<boolean>;
    getABI(chainAddressOrName: string, contractName: string): Promise<ABIContract>;
    getPeers(): Promise<Peer>;
    relaySend(receiptHex: string): Promise<boolean>;
    relayReceive(account: string): Promise<Receipt>;
    getEvents(account: string): Promise<Event>;
    getPlatforms(): Promise<Platform[]>;
    getValidators(): Promise<Validator>;
    settleSwap(sourcePlatform: string, destPlatform: string, hashText: string): Promise<string>;
    getSwapsForAddressOld(account: string): Promise<Swap[]>;
    getSwapsForAddress(account: string, platform: string): Promise<Swap[]>;
    getNFT(symbol: string, nftId: string, extended?: boolean): Promise<NFT>;
    getNFTs(symbol: string, nftIDs: string[], extended?: boolean): Promise<NFT[]>;
}
//# sourceMappingURL=phantasma.d.ts.map